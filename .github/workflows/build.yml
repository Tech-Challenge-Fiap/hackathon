name: Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  ECR_REPOSITORY: hackathon
  EKS_CLUSTER_NAME: fiaphack-cluster 
  AWS_REGION: us-east-2

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python Version
      uses: actions/setup-python@v3
      with:
        python-version: 3.8
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v3
    - name: Install Pylint and Coverage
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint
        pip install coverage
        pip install pytest
    - name: Analysing the code with pylint
      run: |
        pylint $(git ls-files '*.py') --fail-under 2
    - name: Test Backend
      run: |
        export TESTING=1
        echo "Aqui vai rodar os testes"

  deploy:
    name: Deployment
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: test

    steps:

    - name: Set short git commit SHA
      id: commit
      uses: prompt/actions-commit-hash@v2

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Downgrade kubectl client
      run: |
        curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.27.12/2024-04-19/bin/linux/amd64/kubectl
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{env.AWS_REGION}}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}        
        IMAGE_TAG: ${{ steps.commit.outputs.short }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Update kube config
      run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION && kubectl config current-context

    - name: Deploy to EKS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}        
        IMAGE_TAG: ${{ steps.commit.outputs.short }}
      run: |
        kubectl version
        kubectl config current-context
        sed -i.bak "s|VAL_DOCKER_IMAGE|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" kubernetes/hack-app.yaml
        sed -i.bak "s,VAL_POSTGRES_DB_NAME,${{secrets.DB_NAME}}," kubernetes/postgres/hack-app.yaml
        sed -i.bak "s,VAL_POSTGRES_DB_USER,${{secrets.DB_USER}}," kubernetes/postgres/hack-app.yaml
        sed -i.bak "s,VAL_POSTGRES_DB_PASSWORD,${{secrets.DB_PASS}}," kubernetes/postgres/hack-app.yaml
        sed -i.bak "s,VAL_POSTGRES_DB_HOST,${{secrets.DB_HOST}}," kubernetes/postgres/hack-app.yaml
        sed -i.bak "s,VAL_POSTGRES_DB_PORT,${{secrets.DB_PORT}}," kubernetes/postgres/hack-app.yaml
        kubectl apply -f kubernetes/hack-app.yaml
        kubectl apply -f kubernetes/hack-svc.yaml
        kubectl apply -f kubernetes/metrics.yaml
        kubectl apply -f kubernetes/hpa.yaml
